select * from tab; --- gives list of tables

DML: insert, update, delete
DDL: create, alter, drop
TCL: commit, rollback, savepoint

select * from departments;
select department_id, department_name from departments;

desc employees //describes the table structure


create table account
(
aid number(8) primary key,
mobileno number(10) unique not null,
accountholder varchar2(30) not null,
balance number(8,2) check(balance>=1000.00)
);

//savepoint acts as bookmark

update account set balance=30000,accountholder='King Khan' where aid=100;

delete from account;
rollback to B;
commit;

-> create,alter,drop -- DDL Commands perform automatic commit.

select last_name,salary,commission_pct,hire_date,job_id,department_id from employees where department_id=50 or job_id like '%_MAN';

select last_name,salary,commission_pct,hire_date,job_id,department_id from employees where job_id NOT in ('ST_MAN','SA_MAN','PU_MAN');

select last_name,salary,commission_pct,hire_date,job_id,department_id from employees where salary between 10000 and 20000;

select last_name,salary,commission_pct,hire_date,job_id,department_id from employees where salary between 10000 and 20000 order by job_id,salary;

RR format: 95--> 1995, 15--> 2015
YY format: 95--> 2095, 15--> 2015

select * from employees where hire_date between hire_date '01-JAN-05' and '31-DEC-08';

select sum(salary) totalsalary, max(salary) as maxsalary, min(salary) as "Min Salary", count(salary) "Total Count", avg(salary) AverageSalary from employees

TOTALSALARY  MAXSALARY Min Salary Total Count AVERAGESALARY
----------- ---------- ---------- ----------- -------------
     691416      24000       2100         107    6461.83178

Null means empty.
All group functions ignore Null values.
group by clause does not ignore NULL.

select avg( nvl(commission_pct,0) ) as totalcount, count( nvl(commission_pct,0) ) from employees;

select sum( salary ) as totalsalary, count( salary ) from employees group by department_id;

select department_id, sum( salary ) as totalsalary, count( salary ) from employees group by department_id,job_id order by department_id,job_id;

select department_id, job_id, sum( salary ) as totalsalary, count( salary ) from employees having sum(salary) >=50000 group by department_id,job_id order by department_id,job_id;
======================================================================================	 

	 
JOINS

select employees.employee_id, employees.last_name, employees.department_id, departments.department_id, departments.department_name from employees, departments;	 
	 
This product is called Cartesian Product.
It is called Cross Join.

Standard SQL Cross Join
->
select employees.employee_id, employees.last_name, employees.department_id, departments.department_id, departments.department_name from employees cross join departments;
	 
select employees.employee_id, employees.last_name, employees.department_id, departments.department_id, departments.department_name from employees.departments where employees.department_id=departments.department_id; 
=====================================	 
	 
equi join
Standard-> inner join => matched records

select e.employee_id, 
e.last_name, 
e.department_id, 
d.department_id, 
d.department_name 
from employees e join departments d
on e.department_id=d.department_id;
======================================
	 
Equi Join => Natural Join	 
====> Performs join on common columns between tables
----> common in same column name, same data type, same size
----> common columns are displayed only once
----> e.department_id=d.department_id and e.manager_id=d.manager_id;
	 
select * from employees natural join departments;	 

select * from employees join departments using(department_id);	
=========================================================
OUTER JOIN ----standard SQL -----> matched and unmatched outer join

->Left, Right, Full outer join

select e.employee_id, 
e.last_name, 
e.department_id, 
d.department_id, 
d.department_name 
from employees e right outer join departments d
on e.department_id=d.department_id;

select e.employee_id, 
e.last_name, 
e.department_id, 
d.department_id, 
d.department_name 
from employees e full outer join departments d
on e.department_id=d.department_id;
=====================================================================
SELF JOIN

select w.employee_id,
w.last_name,
w.manager_id,
m.last_name
from employees w join employees m
on w.manager_id=m.employee_id;
==============================================================
non equi + self
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 